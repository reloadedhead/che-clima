{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","components/app-shell/header/search/index.tsx","components/app-shell/header/index.tsx","components/app-shell/router/index.tsx","components/app-shell/index.tsx","index.tsx","contexts/api.tsx","contexts/weather.tsx","contexts/auth.tsx","utils/functions.ts"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","theme","createStyles","typography","padding","spacing","root","maxHeight","avatar","borderRadius","listItem","maxWidth","minWidth","SearchPopover","handleClose","anchorEl","options","classes","setLocation","useWeather","Popover","disableAutoFocus","disableEnforceFocus","className","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","length","List","map","ListItem","button","onClick","id","selected","name","department","province","type","coord","lat","lon","distance","ListItemText","primary","secondary","Typography","flexGrow","menuButton","marginLeft","title","display","breakpoints","up","search","position","shape","backgroundColor","fade","palette","common","white","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Header","useState","searchAnchorEl","setSearchAnchorEl","filterTerm","setFilterTerm","setOptions","fetchLocations","useApi","getLocations","a","data","console","log","handleCloseSearchPopover","AppBar","Toolbar","variant","noWrap","InputBase","placeholder","value","onChange","event","currentTarget","input","inputProps","CityWeather","lazy","ContentRouter","fallback","CircularProgress","size","path","component","to","toolbar","mixins","content","AppShell","CssBaseline","ThemedApp","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","main","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","initialState","fetchWeatherForCity","_cityCode","Promise","fetchForecastForCity","fetchShortTermWarningForCity","fetchSunInformationForCity","_name","ApiContext","createContext","ApiProvider","children","getToken","useAuth","smnApi","axios","baseURL","interceptors","request","use","headers","Authorization","Provider","cityCode","get","params","useContext","loading","newLocation","getCurrentWeather","getForecast","getSunReport","getAllWeatherData","WeatherContext","WeatherProvider","currentWeather","setCurrentWeather","forecastReport","setForecastReport","sunReport","setSunReport","setLoading","all","responses","AuthContext","AuthProvider","scrapeSiteForToken","fetch","htmlResponse","text","htmlBody","tokenScriptNode","cheerio","load","matchedStrings","substr","Error","isValidToken","token","decoded","base64","split","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","JSON","parse","decodeToken","isFuture","Date","savedToken","localStorage","getItem","setItem"],"mappings":"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","file":"static/js/main.e065775c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  createStyles,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  Popover,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useWeather } from \"../../../../contexts/weather\";\nimport { LocationSearchItem } from \"../../../../types\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    typography: {\n      padding: theme.spacing(2),\n    },\n    root: {\n      maxHeight: 400,\n    },\n    avatar: {\n      borderRadius: 6,\n    },\n    listItem: {\n      maxWidth: 350,\n      minWidth: 250,\n    },\n  })\n);\n\ninterface SearchPopover {\n  handleClose: () => void;\n  anchorEl: HTMLInputElement | HTMLTextAreaElement | null;\n  options: LocationSearchItem[];\n}\n\nconst SearchPopover = ({ handleClose, anchorEl, options }: SearchPopover) => {\n  const classes = useStyles();\n  const { setLocation } = useWeather();\n\n  const handleSelectLocation = (selected: LocationSearchItem) => {\n    setLocation({\n      id: selected[0] as number,\n      name: selected[1] as string,\n      department: selected[2] as string,\n      province: selected[4] as string,\n      type: selected[4] as string,\n      coord: {\n        lat: selected[6] as number,\n        lon: selected[7] as number,\n      },\n      distance: selected[8] as number,\n    });\n    handleClose();\n  };\n\n  return (\n    <Popover\n      disableAutoFocus\n      disableEnforceFocus\n      className={classes.root}\n      open={Boolean(anchorEl)}\n      anchorEl={anchorEl}\n      onClose={handleClose}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"center\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"center\",\n      }}\n    >\n      {options.length > 0 ? (\n        <List>\n          {options.map((location) => (\n            <ListItem\n              key={location[0]}\n              className={classes.listItem}\n              button\n              onClick={() => handleSelectLocation(location)}\n            >\n              <ListItemText primary={location[1]} secondary={location[3]} />\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <Typography className={classes.typography}>\n          No hay resultados\n        </Typography>\n      )}\n    </Popover>\n  );\n};\n\nexport default SearchPopover;\n","import React, { ChangeEvent, useState } from \"react\";\nimport {\n  createStyles,\n  fade,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport SearchPopover from \"./search\";\nimport { LocationSearchItem } from \"../../../types\";\nimport { useApi } from \"../../../contexts/api\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginLeft: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\",\n      },\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(1),\n        width: \"auto\",\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    inputRoot: {\n      color: \"inherit\",\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"12ch\",\n        \"&:focus\": {\n          width: \"20ch\",\n        },\n      },\n    },\n  })\n);\n\nconst Header = () => {\n  const classes = useStyles();\n  const [searchAnchorEl, setSearchAnchorEl] = useState<\n    HTMLTextAreaElement | HTMLInputElement | null\n  >(null);\n  const [filterTerm, setFilterTerm] = useState(\"\");\n  const [options, setOptions] = useState<LocationSearchItem[]>([]);\n  const { fetchLocations } = useApi();\n\n  const getLocations = async (name: string) => {\n    try {\n      setOptions((await fetchLocations(name)).data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSearchInput = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    if (event.currentTarget.value === \"\") {\n      handleCloseSearchPopover();\n    } else if (event.currentTarget.value.length > 2) {\n      getLocations(event.currentTarget.value);\n    } else {\n      setSearchAnchorEl(event.currentTarget);\n    }\n    setFilterTerm(event.currentTarget.value);\n  };\n\n  const handleCloseSearchPopover = () => {\n    setSearchAnchorEl(null);\n    setOptions([]);\n    setFilterTerm(\"\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            Che Weather!\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Buscar...\"\n              value={filterTerm}\n              onChange={handleSearchInput}\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n      <SearchPopover\n        anchorEl={searchAnchorEl}\n        options={options}\n        handleClose={handleCloseSearchPopover}\n      />\n    </div>\n  );\n};\n\nexport default Header;\n","import { CircularProgress } from '@material-ui/core';\nimport React, { lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nconst CityWeather = lazy(() => import('../../../screens/city'));\n\nconst ContentRouter = () => (\n  <Suspense fallback={<CircularProgress size={32} />}>\n    <Switch>\n      <Route path=\"/\" component={CityWeather} />\n      <Redirect to=\"/\" />\n    </Switch>\n  </Suspense>\n);\n\nexport default ContentRouter;\n","import { makeStyles, Theme, createStyles, CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport Header from './header';\nimport ContentRouter from './router';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbar: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nconst AppShell = () => {\n  const classes = useStyles();\n  return (\n    <>\n      <CssBaseline />\n      <Header />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <ContentRouter />\n      </main>\n    </>\n  )\n};\n\nexport default AppShell;\n","import React, { useMemo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AuthProvider } from \"./contexts/auth\";\nimport { ApiProvider } from \"./contexts/api\";\nimport AppShell from \"./components/app-shell\";\nimport {\n  useMediaQuery,\n  createMuiTheme,\n  MuiThemeProvider,\n} from \"@material-ui/core\";\nimport { WeatherProvider } from \"./contexts/weather\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst ThemedApp = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: \"#0190D0\",\n          },\n          secondary: {\n            main: \"#FFB719\",\n          },\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AppShell />\n    </MuiThemeProvider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <ApiProvider>\n        <WeatherProvider>\n          <BrowserRouter>\n            <ThemedApp />\n          </BrowserRouter>\n        </WeatherProvider>\n      </ApiProvider>\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { createContext, ReactNode, useContext } from \"react\";\nimport axios, { AxiosPromise } from \"axios\";\nimport { ForecastReport, LocationSearchItem, SunReport, WeatherReport } from \"../types\";\nimport { useAuth } from \"./auth\";\n\ninterface ApiContext {\n  fetchWeatherForCity: (cityCode: number) => AxiosPromise<WeatherReport>;\n  fetchShortTermWarningForCity: (cityCode: number) => AxiosPromise<any>;\n  fetchSunInformationForCity: (cityCode: number) => AxiosPromise<SunReport>;\n  fetchForecastForCity: (cityCode: number) => AxiosPromise<ForecastReport>;\n  fetchLocations: (name: string) => AxiosPromise<LocationSearchItem[]>;\n}\n\nconst initialState: ApiContext = {\n  fetchWeatherForCity: (_cityCode: number) => new Promise(() => {}),\n  fetchForecastForCity: (_cityCode: number) => new Promise(() => {}),\n  fetchShortTermWarningForCity: (_cityCode: number) => new Promise(() => {}),\n  fetchSunInformationForCity: (_cityCode: number) => new Promise(() => {}),\n  fetchLocations: (_name: string) => new Promise(() => {}),\n};\n\nconst ApiContext = createContext(initialState);\n\nexport const ApiProvider = ({ children }: { children: ReactNode }) => {\n  const { getToken } = useAuth();\n  const smnApi = axios.create({\n    baseURL: \"https://ws1.smn.gob.ar/v1/\",\n  });\n  smnApi.interceptors.request.use(async (request) => {\n    request.headers = {\n      Authorization: `JWT ${await getToken()}`,\n    };\n    return request;\n  });\n\n  const fetchWeatherForCity = (cityCode: number) =>\n    smnApi.get(`weather/location/${cityCode}`);\n\n  const fetchForecastForCity = (cityCode: number) =>\n    smnApi.get(`forecast/location/${cityCode}`);\n\n  const fetchShortTermWarningForCity = (cityCode: number) =>\n    smnApi.get(`warning/shortterm/location/${cityCode}`);\n\n  const fetchSunInformationForCity = (cityCode: number) =>\n    smnApi.get(`sun/location/${cityCode}`);\n\n  const fetchLocations = (name: string) =>\n    smnApi.get(\"georef/location/search\", { params: { name } });\n\n  return (\n    <ApiContext.Provider\n      value={{\n        fetchWeatherForCity,\n        fetchForecastForCity,\n        fetchShortTermWarningForCity,\n        fetchSunInformationForCity,\n        fetchLocations,\n      }}\n    >\n      {children}\n    </ApiContext.Provider>\n  );\n};\n\nexport const useApi = () => useContext(ApiContext);\n","import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { ForecastReport, SunReport, WeatherReport, Location } from \"../types\";\nimport { useApi } from \"./api\";\n\ninterface WeatherContext {\n  location: Location;\n  currentWeather?: WeatherReport;\n  forecastReport?: ForecastReport;\n  sunReport?: SunReport;\n  loading: boolean;\n  setLocation: (newLocation: Location) => void;\n  getCurrentWeather: () => Promise<void>;\n  getForecast: () => Promise<void>;\n  getSunReport: () => Promise<void>;\n  getAllWeatherData: () => Promise<void>;\n}\n\nconst initialState: WeatherContext = {\n  location: {\n    id: 4864,\n    name: \"Capital Federal\",\n    department: \"Capital Federal\",\n    province: \"Capital Federal\",\n    type: \"Ciudad\",\n    coord: { lon: -58.4258, lat: -34.6217 },\n    distance: 6.38,\n  },\n  loading: false,\n  setLocation: (newLocation: Location) => {},\n  getCurrentWeather: () => new Promise(() => {}),\n  getForecast: () => new Promise(() => {}),\n  getSunReport: () => new Promise(() => {}),\n  getAllWeatherData: () => new Promise(() => {}),\n};\n\nconst WeatherContext = createContext(initialState);\n\nexport const WeatherProvider = ({ children }: { children: ReactNode }) => {\n  const [location, setLocation] = useState<Location>(initialState.location);\n  const [currentWeather, setCurrentWeather] = useState<WeatherReport>();\n  const [forecastReport, setForecastReport] = useState<ForecastReport>();\n  const [sunReport, setSunReport] = useState<SunReport>();\n  const [loading, setLoading] = useState(false);\n\n  const {\n    fetchForecastForCity,\n    fetchSunInformationForCity,\n    fetchWeatherForCity,\n  } = useApi();\n\n  const getCurrentWeather = async () => {\n    try {\n      setLoading(true);\n      setCurrentWeather((await fetchWeatherForCity(location.id)).data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getForecast = async () => {\n    try {\n      setLoading(true);\n      setForecastReport((await fetchForecastForCity(location.id)).data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getSunReport = async () => {\n    try {\n      setLoading(true);\n      setSunReport((await fetchSunInformationForCity(location.id)).data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAllWeatherData = async () => {\n    try {\n      setLoading(true);\n      const responses = await Promise.all([\n        fetchWeatherForCity(location.id),\n        fetchForecastForCity(location.id),\n        fetchSunInformationForCity(location.id),\n      ]);\n      setCurrentWeather(responses[0].data);\n      setForecastReport(responses[1].data);\n      setSunReport(responses[2].data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        location,\n        currentWeather,\n        forecastReport,\n        sunReport,\n        setLocation,\n        getCurrentWeather,\n        getForecast,\n        getSunReport,\n        getAllWeatherData,\n        loading,\n      }}\n    >\n      {children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport const useWeather = () => useContext(WeatherContext);\n","import React, { createContext, ReactNode, useContext } from \"react\";\nimport cheerio from \"cheerio\";\nimport { decodeToken } from \"../utils/functions\";\nimport { isFuture } from 'date-fns'\n\ninterface AuthContext {\n  getToken: () => Promise<string>;\n}\n\nconst initialState: AuthContext = {\n  getToken: () => new Promise(() => {}),\n};\n\nconst AuthContext = createContext(initialState);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n\n  /**\n   * Acá parseamos el sitio del Servicio Metereológico Nacional\n   * y buscamos el token que enchufan desde el server.\n   * Atentis a ver si cambia (siendo estatal, dudo 😅)\n   */\n  const scrapeSiteForToken = async () => {\n    const htmlResponse = await fetch(\"https://www.smn.gob.ar\");\n    const htmlBody = await htmlResponse.text();\n    const tokenScriptNode = cheerio\n      .load(htmlBody)(\n        \"div[class='panel-pane pane-block pane-smn-mapas-pimet-smn-mapas-pimet container']\"\n      )\n      .children(\"div[class=pane-content]\")\n      .children(\"script\")[0].children[0];\n    // @ts-ignore\n    const matchedStrings = (tokenScriptNode[\"data\"] as string).match(\n      /'(.*?)'/g\n    );\n    if (matchedStrings !== null && matchedStrings.length > 0) {\n      return matchedStrings[1].substr(1, matchedStrings[1].length - 2);\n    } else throw new Error();\n  };\n\n  /**\n   * @param token JWT token scrapeado\n   */\n  const isValidToken = (token: string) => {\n    const decoded = decodeToken(token);\n    return isFuture(new Date((decoded['exp'] as number) * 1000))\n  };\n\n  /**\n   * Guardamos el token en localStorage. Si no existe,\n   * o se venció (24hs por ahora) se scrapea uno nuevo.\n   */\n  const getToken = async () => {\n    const savedToken = localStorage.getItem(\"token\");\n    if (savedToken && isValidToken(savedToken)) {\n      return savedToken;\n    } else {\n      const token = await scrapeSiteForToken();\n      localStorage.setItem('token', token);\n      return token;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ getToken }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n","export const decodeToken = (token: string) => {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return JSON.parse(jsonPayload);\n};"],"sourceRoot":""}